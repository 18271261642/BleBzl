package com.afa.tourism.greendao.gen;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.util.Log;

import org.greenrobot.greendao.AbstractDaoMaster;
import org.greenrobot.greendao.database.StandardDatabase;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseOpenHelper;
import org.greenrobot.greendao.identityscope.IdentityScopeType;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * Master of DAO (schema version 1): knows all DAOs.
 */
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 1;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(Database db, boolean ifNotExists) {
        B15PAllStepDBDao.createTable(db, ifNotExists);
        B15PBloodDBDao.createTable(db, ifNotExists);
        B15PHeartDBDao.createTable(db, ifNotExists);
        B15PSleepDBDao.createTable(db, ifNotExists);
        B15PStepDBDao.createTable(db, ifNotExists);
        B15PTestBloopDBDao.createTable(db, ifNotExists);
        B18iHeartDatasDao.createTable(db, ifNotExists);
        B18iSleepDatasDao.createTable(db, ifNotExists);
        B18iStepDatasDao.createTable(db, ifNotExists);
        B18iUserInforDatasDao.createTable(db, ifNotExists);
        B30DevicesSportDao.createTable(db, ifNotExists);
        AlarmClockBeanDao.createTable(db, ifNotExists);
        B15PSleepBeanDao.createTable(db, ifNotExists);
        B15PSleepHeartRateStepBeanDao.createTable(db, ifNotExists);
        BlueUserDao.createTable(db, ifNotExists);
        BuleUserDao.createTable(db, ifNotExists);
        SleepBeanDao.createTable(db, ifNotExists);
        StepBeanDao.createTable(db, ifNotExists);
        LatLonBeanDao.createTable(db, ifNotExists);
        SportMapsDao.createTable(db, ifNotExists);
        H9HeartDBModelDao.createTable(db, ifNotExists);
        H9SleepDBModelDao.createTable(db, ifNotExists);
        H9StepDBModelDao.createTable(db, ifNotExists);
    }

    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(Database db, boolean ifExists) {
        B15PAllStepDBDao.dropTable(db, ifExists);
        B15PBloodDBDao.dropTable(db, ifExists);
        B15PHeartDBDao.dropTable(db, ifExists);
        B15PSleepDBDao.dropTable(db, ifExists);
        B15PStepDBDao.dropTable(db, ifExists);
        B15PTestBloopDBDao.dropTable(db, ifExists);
        B18iHeartDatasDao.dropTable(db, ifExists);
        B18iSleepDatasDao.dropTable(db, ifExists);
        B18iStepDatasDao.dropTable(db, ifExists);
        B18iUserInforDatasDao.dropTable(db, ifExists);
        B30DevicesSportDao.dropTable(db, ifExists);
        AlarmClockBeanDao.dropTable(db, ifExists);
        B15PSleepBeanDao.dropTable(db, ifExists);
        B15PSleepHeartRateStepBeanDao.dropTable(db, ifExists);
        BlueUserDao.dropTable(db, ifExists);
        BuleUserDao.dropTable(db, ifExists);
        SleepBeanDao.dropTable(db, ifExists);
        StepBeanDao.dropTable(db, ifExists);
        LatLonBeanDao.dropTable(db, ifExists);
        SportMapsDao.dropTable(db, ifExists);
        H9HeartDBModelDao.dropTable(db, ifExists);
        H9SleepDBModelDao.dropTable(db, ifExists);
        H9StepDBModelDao.dropTable(db, ifExists);
    }

    /**
     * WARNING: Drops all table on Upgrade! Use only during development.
     * Convenience method using a {@link DevOpenHelper}.
     */
    public static DaoSession newDevSession(Context context, String name) {
        Database db = new DevOpenHelper(context, name).getWritableDb();
        DaoMaster daoMaster = new DaoMaster(db);
        return daoMaster.newSession();
    }

    public DaoMaster(SQLiteDatabase db) {
        this(new StandardDatabase(db));
    }

    public DaoMaster(Database db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(B15PAllStepDBDao.class);
        registerDaoClass(B15PBloodDBDao.class);
        registerDaoClass(B15PHeartDBDao.class);
        registerDaoClass(B15PSleepDBDao.class);
        registerDaoClass(B15PStepDBDao.class);
        registerDaoClass(B15PTestBloopDBDao.class);
        registerDaoClass(B18iHeartDatasDao.class);
        registerDaoClass(B18iSleepDatasDao.class);
        registerDaoClass(B18iStepDatasDao.class);
        registerDaoClass(B18iUserInforDatasDao.class);
        registerDaoClass(B30DevicesSportDao.class);
        registerDaoClass(AlarmClockBeanDao.class);
        registerDaoClass(B15PSleepBeanDao.class);
        registerDaoClass(B15PSleepHeartRateStepBeanDao.class);
        registerDaoClass(BlueUserDao.class);
        registerDaoClass(BuleUserDao.class);
        registerDaoClass(SleepBeanDao.class);
        registerDaoClass(StepBeanDao.class);
        registerDaoClass(LatLonBeanDao.class);
        registerDaoClass(SportMapsDao.class);
        registerDaoClass(H9HeartDBModelDao.class);
        registerDaoClass(H9SleepDBModelDao.class);
        registerDaoClass(H9StepDBModelDao.class);
    }

    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }

    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }

    /**
     * Calls {@link #createAllTables(Database, boolean)} in {@link #onCreate(Database)} -
     */
    public static abstract class OpenHelper extends DatabaseOpenHelper {
        public OpenHelper(Context context, String name) {
            super(context, name, SCHEMA_VERSION);
        }

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(Database db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }

    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name) {
            super(context, name);
        }

        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(Database db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

}
