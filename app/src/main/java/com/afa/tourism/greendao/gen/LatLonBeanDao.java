package com.afa.tourism.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ble.blebzl.bzlmaps.mapdb.LatLonBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LAT_LON_BEAN".
*/
public class LatLonBeanDao extends AbstractDao<LatLonBean, Integer> {

    public static final String TABLENAME = "LAT_LON_BEAN";

    /**
     * Properties of entity LatLonBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Type = new Property(0, int.class, "type", true, "TYPE");
        public final static Property SaveTime = new Property(1, String.class, "saveTime", false, "SAVE_TIME");
        public final static Property Mac = new Property(2, String.class, "mac", false, "MAC");
        public final static Property Rtc = new Property(3, String.class, "rtc", false, "RTC");
        public final static Property UserId = new Property(4, String.class, "userId", false, "USER_ID");
        public final static Property LatLons = new Property(5, String.class, "latLons", false, "LAT_LONS");
    }


    public LatLonBeanDao(DaoConfig config) {
        super(config);
    }
    
    public LatLonBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LAT_LON_BEAN\" (" + //
                "\"TYPE\" INTEGER PRIMARY KEY NOT NULL ," + // 0: type
                "\"SAVE_TIME\" TEXT," + // 1: saveTime
                "\"MAC\" TEXT," + // 2: mac
                "\"RTC\" TEXT," + // 3: rtc
                "\"USER_ID\" TEXT," + // 4: userId
                "\"LAT_LONS\" TEXT);"); // 5: latLons
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LAT_LON_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LatLonBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getType());
 
        String saveTime = entity.getSaveTime();
        if (saveTime != null) {
            stmt.bindString(2, saveTime);
        }
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(3, mac);
        }
 
        String rtc = entity.getRtc();
        if (rtc != null) {
            stmt.bindString(4, rtc);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(5, userId);
        }
 
        String latLons = entity.getLatLons();
        if (latLons != null) {
            stmt.bindString(6, latLons);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LatLonBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getType());
 
        String saveTime = entity.getSaveTime();
        if (saveTime != null) {
            stmt.bindString(2, saveTime);
        }
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(3, mac);
        }
 
        String rtc = entity.getRtc();
        if (rtc != null) {
            stmt.bindString(4, rtc);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(5, userId);
        }
 
        String latLons = entity.getLatLons();
        if (latLons != null) {
            stmt.bindString(6, latLons);
        }
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public LatLonBean readEntity(Cursor cursor, int offset) {
        LatLonBean entity = new LatLonBean( //
            cursor.getInt(offset + 0), // type
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // saveTime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mac
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // rtc
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // latLons
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LatLonBean entity, int offset) {
        entity.setType(cursor.getInt(offset + 0));
        entity.setSaveTime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMac(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRtc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLatLons(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(LatLonBean entity, long rowId) {
        return entity.getType();
    }
    
    @Override
    public Integer getKey(LatLonBean entity) {
        if(entity != null) {
            return entity.getType();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LatLonBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
