package com.afa.tourism.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ble.blebzl.h9.db.H9SleepDBModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "H9_SLEEP_DBMODEL".
*/
public class H9SleepDBModelDao extends AbstractDao<H9SleepDBModel, Long> {

    public static final String TABLENAME = "H9_SLEEP_DBMODEL";

    /**
     * Properties of entity H9SleepDBModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DayCount = new Property(1, int.class, "dayCount", false, "DAY_COUNT");
        public final static Property Rec = new Property(2, String.class, "rec", false, "REC");
        public final static Property DateTime = new Property(3, String.class, "dateTime", false, "DATE_TIME");
        public final static Property SleepTime = new Property(4, String.class, "sleepTime", false, "SLEEP_TIME");
        public final static Property SleepType = new Property(5, int.class, "sleepType", false, "SLEEP_TYPE");
        public final static Property DevicesCode = new Property(6, String.class, "devicesCode", false, "DEVICES_CODE");
        public final static Property UserId = new Property(7, String.class, "userId", false, "USER_ID");
    }


    public H9SleepDBModelDao(DaoConfig config) {
        super(config);
    }
    
    public H9SleepDBModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"H9_SLEEP_DBMODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DAY_COUNT\" INTEGER NOT NULL ," + // 1: dayCount
                "\"REC\" TEXT," + // 2: rec
                "\"DATE_TIME\" TEXT," + // 3: dateTime
                "\"SLEEP_TIME\" TEXT," + // 4: sleepTime
                "\"SLEEP_TYPE\" INTEGER NOT NULL ," + // 5: sleepType
                "\"DEVICES_CODE\" TEXT," + // 6: devicesCode
                "\"USER_ID\" TEXT);"); // 7: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"H9_SLEEP_DBMODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, H9SleepDBModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDayCount());
 
        String rec = entity.getRec();
        if (rec != null) {
            stmt.bindString(3, rec);
        }
 
        String dateTime = entity.getDateTime();
        if (dateTime != null) {
            stmt.bindString(4, dateTime);
        }
 
        String sleepTime = entity.getSleepTime();
        if (sleepTime != null) {
            stmt.bindString(5, sleepTime);
        }
        stmt.bindLong(6, entity.getSleepType());
 
        String devicesCode = entity.getDevicesCode();
        if (devicesCode != null) {
            stmt.bindString(7, devicesCode);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(8, userId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, H9SleepDBModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDayCount());
 
        String rec = entity.getRec();
        if (rec != null) {
            stmt.bindString(3, rec);
        }
 
        String dateTime = entity.getDateTime();
        if (dateTime != null) {
            stmt.bindString(4, dateTime);
        }
 
        String sleepTime = entity.getSleepTime();
        if (sleepTime != null) {
            stmt.bindString(5, sleepTime);
        }
        stmt.bindLong(6, entity.getSleepType());
 
        String devicesCode = entity.getDevicesCode();
        if (devicesCode != null) {
            stmt.bindString(7, devicesCode);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(8, userId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public H9SleepDBModel readEntity(Cursor cursor, int offset) {
        H9SleepDBModel entity = new H9SleepDBModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // dayCount
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // rec
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // dateTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sleepTime
            cursor.getInt(offset + 5), // sleepType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // devicesCode
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // userId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, H9SleepDBModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDayCount(cursor.getInt(offset + 1));
        entity.setRec(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDateTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSleepTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSleepType(cursor.getInt(offset + 5));
        entity.setDevicesCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUserId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(H9SleepDBModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(H9SleepDBModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(H9SleepDBModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
