package com.afa.tourism.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ble.blebzl.b15p.b15pdb.B15PAllStepDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "B15_PALL_STEP_DB".
*/
public class B15PAllStepDBDao extends AbstractDao<B15PAllStepDB, Long> {

    public static final String TABLENAME = "B15_PALL_STEP_DB";

    /**
     * Properties of entity B15PAllStepDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property DevicesMac = new Property(1, String.class, "devicesMac", false, "DEVICES_MAC");
        public final static Property StepDataTime = new Property(2, String.class, "stepDataTime", false, "STEP_DATA_TIME");
        public final static Property StepItemNumber = new Property(3, int.class, "stepItemNumber", false, "STEP_ITEM_NUMBER");
        public final static Property IsUpdata = new Property(4, int.class, "isUpdata", false, "IS_UPDATA");
    }


    public B15PAllStepDBDao(DaoConfig config) {
        super(config);
    }
    
    public B15PAllStepDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"B15_PALL_STEP_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"DEVICES_MAC\" TEXT," + // 1: devicesMac
                "\"STEP_DATA_TIME\" TEXT," + // 2: stepDataTime
                "\"STEP_ITEM_NUMBER\" INTEGER NOT NULL ," + // 3: stepItemNumber
                "\"IS_UPDATA\" INTEGER NOT NULL );"); // 4: isUpdata
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"B15_PALL_STEP_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, B15PAllStepDB entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String devicesMac = entity.getDevicesMac();
        if (devicesMac != null) {
            stmt.bindString(2, devicesMac);
        }
 
        String stepDataTime = entity.getStepDataTime();
        if (stepDataTime != null) {
            stmt.bindString(3, stepDataTime);
        }
        stmt.bindLong(4, entity.getStepItemNumber());
        stmt.bindLong(5, entity.getIsUpdata());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, B15PAllStepDB entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String devicesMac = entity.getDevicesMac();
        if (devicesMac != null) {
            stmt.bindString(2, devicesMac);
        }
 
        String stepDataTime = entity.getStepDataTime();
        if (stepDataTime != null) {
            stmt.bindString(3, stepDataTime);
        }
        stmt.bindLong(4, entity.getStepItemNumber());
        stmt.bindLong(5, entity.getIsUpdata());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public B15PAllStepDB readEntity(Cursor cursor, int offset) {
        B15PAllStepDB entity = new B15PAllStepDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // devicesMac
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // stepDataTime
            cursor.getInt(offset + 3), // stepItemNumber
            cursor.getInt(offset + 4) // isUpdata
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, B15PAllStepDB entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDevicesMac(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStepDataTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStepItemNumber(cursor.getInt(offset + 3));
        entity.setIsUpdata(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(B15PAllStepDB entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(B15PAllStepDB entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(B15PAllStepDB entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
