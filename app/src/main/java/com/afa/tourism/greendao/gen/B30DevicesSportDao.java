package com.afa.tourism.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ble.blebzl.b30.bean.B30DevicesSport;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "B30_DEVICES_SPORT".
*/
public class B30DevicesSportDao extends AbstractDao<B30DevicesSport, Void> {

    public static final String TABLENAME = "B30_DEVICES_SPORT";

    /**
     * Properties of entity B30DevicesSport.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Date = new Property(0, String.class, "date", false, "DATE");
        public final static Property StartTime = new Property(1, String.class, "startTime", false, "START_TIME");
        public final static Property StopTime = new Property(2, String.class, "stopTime", false, "STOP_TIME");
        public final static Property SportTime = new Property(3, int.class, "sportTime", false, "SPORT_TIME");
        public final static Property StepCount = new Property(4, int.class, "stepCount", false, "STEP_COUNT");
        public final static Property SportCount = new Property(5, int.class, "sportCount", false, "SPORT_COUNT");
        public final static Property Kcals = new Property(6, double.class, "kcals", false, "KCALS");
        public final static Property Distance = new Property(7, double.class, "distance", false, "DISTANCE");
        public final static Property RecordCount = new Property(8, int.class, "recordCount", false, "RECORD_COUNT");
        public final static Property PauseCount = new Property(9, int.class, "pauseCount", false, "PAUSE_COUNT");
        public final static Property PauseTime = new Property(10, int.class, "pauseTime", false, "PAUSE_TIME");
        public final static Property Crc = new Property(11, int.class, "crc", false, "CRC");
        public final static Property Peisu = new Property(12, int.class, "peisu", false, "PEISU");
        public final static Property Oxsporttimes = new Property(13, int.class, "oxsporttimes", false, "OXSPORTTIMES");
        public final static Property AverRate = new Property(14, int.class, "averRate", false, "AVER_RATE");
        public final static Property Username = new Property(15, String.class, "username", false, "USERNAME");
        public final static Property Address = new Property(16, String.class, "address", false, "ADDRESS");
    }


    public B30DevicesSportDao(DaoConfig config) {
        super(config);
    }
    
    public B30DevicesSportDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"B30_DEVICES_SPORT\" (" + //
                "\"DATE\" TEXT," + // 0: date
                "\"START_TIME\" TEXT," + // 1: startTime
                "\"STOP_TIME\" TEXT," + // 2: stopTime
                "\"SPORT_TIME\" INTEGER NOT NULL ," + // 3: sportTime
                "\"STEP_COUNT\" INTEGER NOT NULL ," + // 4: stepCount
                "\"SPORT_COUNT\" INTEGER NOT NULL ," + // 5: sportCount
                "\"KCALS\" REAL NOT NULL ," + // 6: kcals
                "\"DISTANCE\" REAL NOT NULL ," + // 7: distance
                "\"RECORD_COUNT\" INTEGER NOT NULL ," + // 8: recordCount
                "\"PAUSE_COUNT\" INTEGER NOT NULL ," + // 9: pauseCount
                "\"PAUSE_TIME\" INTEGER NOT NULL ," + // 10: pauseTime
                "\"CRC\" INTEGER NOT NULL ," + // 11: crc
                "\"PEISU\" INTEGER NOT NULL ," + // 12: peisu
                "\"OXSPORTTIMES\" INTEGER NOT NULL ," + // 13: oxsporttimes
                "\"AVER_RATE\" INTEGER NOT NULL ," + // 14: averRate
                "\"USERNAME\" TEXT," + // 15: username
                "\"ADDRESS\" TEXT);"); // 16: address
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"B30_DEVICES_SPORT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, B30DevicesSport entity) {
        stmt.clearBindings();
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(1, date);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(2, startTime);
        }
 
        String stopTime = entity.getStopTime();
        if (stopTime != null) {
            stmt.bindString(3, stopTime);
        }
        stmt.bindLong(4, entity.getSportTime());
        stmt.bindLong(5, entity.getStepCount());
        stmt.bindLong(6, entity.getSportCount());
        stmt.bindDouble(7, entity.getKcals());
        stmt.bindDouble(8, entity.getDistance());
        stmt.bindLong(9, entity.getRecordCount());
        stmt.bindLong(10, entity.getPauseCount());
        stmt.bindLong(11, entity.getPauseTime());
        stmt.bindLong(12, entity.getCrc());
        stmt.bindLong(13, entity.getPeisu());
        stmt.bindLong(14, entity.getOxsporttimes());
        stmt.bindLong(15, entity.getAverRate());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(16, username);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(17, address);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, B30DevicesSport entity) {
        stmt.clearBindings();
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(1, date);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(2, startTime);
        }
 
        String stopTime = entity.getStopTime();
        if (stopTime != null) {
            stmt.bindString(3, stopTime);
        }
        stmt.bindLong(4, entity.getSportTime());
        stmt.bindLong(5, entity.getStepCount());
        stmt.bindLong(6, entity.getSportCount());
        stmt.bindDouble(7, entity.getKcals());
        stmt.bindDouble(8, entity.getDistance());
        stmt.bindLong(9, entity.getRecordCount());
        stmt.bindLong(10, entity.getPauseCount());
        stmt.bindLong(11, entity.getPauseTime());
        stmt.bindLong(12, entity.getCrc());
        stmt.bindLong(13, entity.getPeisu());
        stmt.bindLong(14, entity.getOxsporttimes());
        stmt.bindLong(15, entity.getAverRate());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(16, username);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(17, address);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public B30DevicesSport readEntity(Cursor cursor, int offset) {
        B30DevicesSport entity = new B30DevicesSport( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // date
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // startTime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // stopTime
            cursor.getInt(offset + 3), // sportTime
            cursor.getInt(offset + 4), // stepCount
            cursor.getInt(offset + 5), // sportCount
            cursor.getDouble(offset + 6), // kcals
            cursor.getDouble(offset + 7), // distance
            cursor.getInt(offset + 8), // recordCount
            cursor.getInt(offset + 9), // pauseCount
            cursor.getInt(offset + 10), // pauseTime
            cursor.getInt(offset + 11), // crc
            cursor.getInt(offset + 12), // peisu
            cursor.getInt(offset + 13), // oxsporttimes
            cursor.getInt(offset + 14), // averRate
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // username
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // address
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, B30DevicesSport entity, int offset) {
        entity.setDate(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setStartTime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStopTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSportTime(cursor.getInt(offset + 3));
        entity.setStepCount(cursor.getInt(offset + 4));
        entity.setSportCount(cursor.getInt(offset + 5));
        entity.setKcals(cursor.getDouble(offset + 6));
        entity.setDistance(cursor.getDouble(offset + 7));
        entity.setRecordCount(cursor.getInt(offset + 8));
        entity.setPauseCount(cursor.getInt(offset + 9));
        entity.setPauseTime(cursor.getInt(offset + 10));
        entity.setCrc(cursor.getInt(offset + 11));
        entity.setPeisu(cursor.getInt(offset + 12));
        entity.setOxsporttimes(cursor.getInt(offset + 13));
        entity.setAverRate(cursor.getInt(offset + 14));
        entity.setUsername(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setAddress(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(B30DevicesSport entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(B30DevicesSport entity) {
        return null;
    }

    @Override
    public boolean hasKey(B30DevicesSport entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
