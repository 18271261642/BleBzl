package com.afa.tourism.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ble.blebzl.bzlmaps.mapdb.SportMaps;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SPORT_MAPS".
*/
public class SportMapsDao extends AbstractDao<SportMaps, Void> {

    public static final String TABLENAME = "SPORT_MAPS";

    /**
     * Properties of entity SportMaps.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SaveTime = new Property(0, String.class, "saveTime", false, "SAVE_TIME");
        public final static Property Mac = new Property(1, String.class, "mac", false, "MAC");
        public final static Property Rtc = new Property(2, String.class, "rtc", false, "RTC");
        public final static Property Image = new Property(3, String.class, "image", false, "IMAGE");
        public final static Property Temp = new Property(4, String.class, "temp", false, "TEMP");
        public final static Property Distance = new Property(5, String.class, "distance", false, "DISTANCE");
        public final static Property TimeLen = new Property(6, String.class, "timeLen", false, "TIME_LEN");
        public final static Property Description = new Property(7, String.class, "description", false, "DESCRIPTION");
        public final static Property Calories = new Property(8, String.class, "calories", false, "CALORIES");
        public final static Property Type = new Property(9, int.class, "type", false, "TYPE");
        public final static Property UserId = new Property(10, String.class, "userId", false, "USER_ID");
        public final static Property Speed = new Property(11, String.class, "speed", false, "SPEED");
        public final static Property Pm25 = new Property(12, String.class, "pm25", false, "PM25");
        public final static Property StartTime = new Property(13, String.class, "startTime", false, "START_TIME");
        public final static Property Ids = new Property(14, int.class, "ids", false, "IDS");
        public final static Property LatLons = new Property(15, String.class, "latLons", false, "LAT_LONS");
    }


    public SportMapsDao(DaoConfig config) {
        super(config);
    }
    
    public SportMapsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SPORT_MAPS\" (" + //
                "\"SAVE_TIME\" TEXT," + // 0: saveTime
                "\"MAC\" TEXT," + // 1: mac
                "\"RTC\" TEXT," + // 2: rtc
                "\"IMAGE\" TEXT," + // 3: image
                "\"TEMP\" TEXT," + // 4: temp
                "\"DISTANCE\" TEXT," + // 5: distance
                "\"TIME_LEN\" TEXT," + // 6: timeLen
                "\"DESCRIPTION\" TEXT," + // 7: description
                "\"CALORIES\" TEXT," + // 8: calories
                "\"TYPE\" INTEGER NOT NULL ," + // 9: type
                "\"USER_ID\" TEXT," + // 10: userId
                "\"SPEED\" TEXT," + // 11: speed
                "\"PM25\" TEXT," + // 12: pm25
                "\"START_TIME\" TEXT," + // 13: startTime
                "\"IDS\" INTEGER NOT NULL ," + // 14: ids
                "\"LAT_LONS\" TEXT);"); // 15: latLons
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SPORT_MAPS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SportMaps entity) {
        stmt.clearBindings();
 
        String saveTime = entity.getSaveTime();
        if (saveTime != null) {
            stmt.bindString(1, saveTime);
        }
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(2, mac);
        }
 
        String rtc = entity.getRtc();
        if (rtc != null) {
            stmt.bindString(3, rtc);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(4, image);
        }
 
        String temp = entity.getTemp();
        if (temp != null) {
            stmt.bindString(5, temp);
        }
 
        String distance = entity.getDistance();
        if (distance != null) {
            stmt.bindString(6, distance);
        }
 
        String timeLen = entity.getTimeLen();
        if (timeLen != null) {
            stmt.bindString(7, timeLen);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(8, description);
        }
 
        String calories = entity.getCalories();
        if (calories != null) {
            stmt.bindString(9, calories);
        }
        stmt.bindLong(10, entity.getType());
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(11, userId);
        }
 
        String speed = entity.getSpeed();
        if (speed != null) {
            stmt.bindString(12, speed);
        }
 
        String pm25 = entity.getPm25();
        if (pm25 != null) {
            stmt.bindString(13, pm25);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(14, startTime);
        }
        stmt.bindLong(15, entity.getIds());
 
        String latLons = entity.getLatLons();
        if (latLons != null) {
            stmt.bindString(16, latLons);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SportMaps entity) {
        stmt.clearBindings();
 
        String saveTime = entity.getSaveTime();
        if (saveTime != null) {
            stmt.bindString(1, saveTime);
        }
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(2, mac);
        }
 
        String rtc = entity.getRtc();
        if (rtc != null) {
            stmt.bindString(3, rtc);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(4, image);
        }
 
        String temp = entity.getTemp();
        if (temp != null) {
            stmt.bindString(5, temp);
        }
 
        String distance = entity.getDistance();
        if (distance != null) {
            stmt.bindString(6, distance);
        }
 
        String timeLen = entity.getTimeLen();
        if (timeLen != null) {
            stmt.bindString(7, timeLen);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(8, description);
        }
 
        String calories = entity.getCalories();
        if (calories != null) {
            stmt.bindString(9, calories);
        }
        stmt.bindLong(10, entity.getType());
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(11, userId);
        }
 
        String speed = entity.getSpeed();
        if (speed != null) {
            stmt.bindString(12, speed);
        }
 
        String pm25 = entity.getPm25();
        if (pm25 != null) {
            stmt.bindString(13, pm25);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(14, startTime);
        }
        stmt.bindLong(15, entity.getIds());
 
        String latLons = entity.getLatLons();
        if (latLons != null) {
            stmt.bindString(16, latLons);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public SportMaps readEntity(Cursor cursor, int offset) {
        SportMaps entity = new SportMaps( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // saveTime
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mac
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // rtc
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // image
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // temp
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // distance
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // timeLen
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // description
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // calories
            cursor.getInt(offset + 9), // type
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // userId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // speed
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // pm25
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // startTime
            cursor.getInt(offset + 14), // ids
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // latLons
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SportMaps entity, int offset) {
        entity.setSaveTime(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMac(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRtc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTemp(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDistance(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTimeLen(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDescription(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCalories(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setType(cursor.getInt(offset + 9));
        entity.setUserId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSpeed(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPm25(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setStartTime(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIds(cursor.getInt(offset + 14));
        entity.setLatLons(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(SportMaps entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(SportMaps entity) {
        return null;
    }

    @Override
    public boolean hasKey(SportMaps entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
